[build-system]
requires = ["maturin>=1.2,<2.0"]
build-backend = "maturin"

[project]
name = "letsql"
dynamic = ["version"]
dependencies = [
    "ibis-framework>=9.4.0,<10 ; python_version >= '3.10' and python_version < '4.0'",
    "dask==2025.1.0; python_version >= '3.10' and python_version < '4.0'",
    "attrs>=24.0.0,<26; python_version >= '3.10' and python_version < '4.0'",
    "connectorx>=0.3.2,<0.5.0; python_version >= '3.10' and python_version < '4.0'",
    "psycopg2-binary>=2.9.9,<3 ; python_version >= '3.10' and python_version < '4.0'",
    "sqlalchemy>=2.0.29,<3 ; python_version >= '3.10' and python_version < '4.0'",
    "pyarrow>=13.0.0,<20; python_version >= '3.10' and python_version < '4.0'",
    "structlog>=24.2.0,<26; python_version >= '3.10' and python_version < '4.0'",
    "pytest-mock>=3.14.0,<4 ; python_version >= '3.10' and python_version < '4.0'",
    "cityhash>=0.4.7,<1 ; python_version >= '3.10' and python_version < '4.0'",
    "adbc-driver-postgresql>=1.2.0,<2 ; python_version >= '3.10' and python_version < '4.0'",
    "pandas>=1.5.3,<3 ; python_version >= '3.10' and python_version < '4.0'",
    "pyarrow-hotfix>=0.4,<1 ; python_version >= '3.10' and python_version < '4.0'",
    "geoarrow-types>=0.2,<1 ; python_version >= '3.10' and python_version < '4.0'",
    "pythran>=0.17.0 ; sys_platform == 'darwin'",
]
requires-python = ">=3.10"
authors = [
    { name = "Hussain Sultan", email = "hussain@letsql.com" },
]
maintainers = [
    { email = "Dan Lovell <dan@letsql.com>" },
    { email = "Daniel Mesejo <mesejo@letsql.com>" },
]
description = "Data processing library built on top of Ibis and DataFusion to write multi-engine data workflows."
readme = "README.md"
license = { file = "LICENSE" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Database :: Database Engines/Servers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Rust",
    "Programming Language :: Python :: Implementation :: CPython"
]

[project.urls]
Homepage = "https://www.letsql.com/"
Repository = "https://github.com/letsql/letsql.git"
Issues = "https://github.com/letsql/letsql/issues"
Changelog = "https://github.com/letsql/letsql/blob/main/CHANGELOG.md"

[project.optional-dependencies]
duckdb = [
    "duckdb>=1.1.3",
]
datafusion = [
    "datafusion>=0.6,<44; python_version >= '3.10' and python_version < '4.0'"
]
snowflake = [
    "snowflake-connector-python>=3.10.1,<4 ; python_version >= '3.10' and python_version < '4.0'"
]
quickgrove = [
    "quickgrove>=0.1.2",
]
examples = [
    "fsspec>=2024.6.1,<2024.12.1; python_version >= '3.10' and python_version < '4.0'",
    "pins[gcs]>=0.8.3,<1 ; python_version >= '3.10' and python_version < '4.0'",
    "xgboost >=1.6.1 ; python_version >= '3.10' and python_version < '4.0'",
    "duckdb >=0.10.3,<2 ; python_version >= '3.10' and python_version < '4.0'"
]

[dependency-groups]
dev = [
    "black==25.1.0",
    "blackdoc==0.3.9",
    "codespell[hard-encoding-detection,toml]==2.4.1",
    "coverage[toml]==7.6.10",
    "git-cliff<3.0.0,>=2.2.1",
    "ipython<9.0.0,>=8.19.0",
    "pre-commit==4.1.0",
    "pytest==8.3.4",
    "pytest-cov==6.0.0",
    "ruff==0.9.3",
    "trino==0.332.0",
    "pytest-codspeed<4.0.0,>=3.0.0",
    "maturin>=1.7.4",
    "pip>=24.3.1",
    "quickgrove>=0.1.2",
]
test = [
    "datafusion>=43.1.0",
    "duckdb>=1.1.3",
    "pytest-snapshot<1.0.0,>=0.9.0",
    "scikit-learn<2.0.0,>=1.4.0",
    "xgboost>=1.6.1",
    "quickgrove>=0.1.2",
]
docs = [
    "quartodoc<0.10.0,>=0.7.2",
    "nbformat<6.0.0,>=5.10.4",
    "nbclient<1.0.0,>=0.10.0",
    "ipykernel<7.0.0,>=6.29.4",
]

[project.entry-points."letsql.backends"]
let = "letsql.backends.let"
postgres = "letsql.backends.postgres"
snowflake = "letsql.backends.snowflake"
datafusion = "letsql.backends.datafusion"
duckdb = "letsql.backends.duckdb"
pandas = "letsql.backends.pandas"

[tool.maturin]
module-name = "letsql._internal"
python-source = "python"
features = ["pyo3/extension-module"]

[tool.ruff.lint]
extend-select = ["I", "ICN"]

[tool.ruff.lint.per-file-ignores]
"python/letsql/__init__.py" = ["I001"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"letsql" = "ls"

[tool.ruff.lint.isort]
known-first-party = ["letsql"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2

[tool.codespell]
skip = "*.lock,.direnv,.git,docs/_freeze/**/html.json"
ignore-regex = '\b(DOUB|i[if]f|I[IF]F|lamduh|AFE|crate|ba)\b'
builtin = "clear,rare,names"

[tool.pytest.ini_options]
filterwarnings = [
    # pandas 2.2 warnings
    'ignore:DataFrameGroupBy\.apply operated on the grouping columns\. This behavior is deprecated:DeprecationWarning',
    'ignore:Downcasting object dtype arrays on \.fillna, \.ffill, \.bfill is deprecated:FutureWarning',
    # pandas 2.2 warnings coming directly from the way flink uses pandas
    "ignore:Passing a BlockManager to DataFrame is deprecated:DeprecationWarning",
    "ignore:.+ /workspace/src/objective/regression_obj.cu:UserWarning"
]
markers = [
    "snowflake",
    "library",
    "s3"
]
consider_namespace_packages = true


[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details\

{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""
trim = true


[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
commit_parsers = [
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
protect_breaking_commits = false
filter_commits = true
tag_pattern = "v[0-9].*"
topo_order = false
sort_commits = "oldest"
