[build-system]
requires = ["maturin>=1.2,<2.0"]
build-backend = "maturin"

[project]
name = "letsql"
dynamic = ["version"]
dependencies = [
    "xorq==0.1.14; python_version >= '3.10' and python_version < '4.0'"
]
requires-python = ">=3.10"
authors = [
    { name = "Hussain Sultan", email = "hussain@letsql.com" },
]
maintainers = [
    { name = "Dan Lovell", email = "dan@letsql.com" },
    { name = "Daniel Mesejo", email = "mesejo@letsql.com" },
]
description = "Data processing library built on top of Ibis and DataFusion to write multi-engine data workflows."
readme = "README.md"
classifiers = [
    "Development Status :: 7 - Inactive",
]

[tool.maturin]
module-name = "letsql._internal"
python-source = "python"
features = ["pyo3/extension-module"]

[tool.vendoring]
destination = "python/letsql/vendor/"
requirements = "vendors.txt"
namespace = "letsql.vendor"

protected-files = ["__init__.py", "README.md", "vendors.txt"]
patches-dir = "tasks/patches"

[tool.vendoring.transformations]
substitute = [
    {match = '__import__("ibis")', replace = '__import__("letsql.vendor.ibis")'}
]
drop = [
    "bin/",
    "*.so",
    "typing.*",
    "*/tests/"
]

[tool.ruff.lint]
extend-select = ["I", "ICN"]

[tool.ruff.lint.per-file-ignores]
"python/letsql/__init__.py" = ["I001"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"letsql" = "ls"

[tool.ruff.lint.isort]
known-first-party = ["letsql"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2

[tool.codespell]
skip = "*.lock,.direnv,.git,docs/_freeze/**/html.json"
ignore-regex = '\b(DOUB|i[if]f|I[IF]F|lamduh|AFE|crate|ba)\b'
builtin = "clear,rare,names"

[tool.pytest.ini_options]
filterwarnings = [
    # pandas 2.2 warnings
    'ignore:DataFrameGroupBy\.apply operated on the grouping columns\. This behavior is deprecated:DeprecationWarning',
    'ignore:Downcasting object dtype arrays on \.fillna, \.ffill, \.bfill is deprecated:FutureWarning',
    # pandas 2.2 warnings coming directly from the way flink uses pandas
    "ignore:Passing a BlockManager to DataFrame is deprecated:DeprecationWarning",
    "ignore:.+ /workspace/src/objective/regression_obj.cu:UserWarning"
]
markers = [
    "snowflake",
    "library",
    "s3"
]
consider_namespace_packages = true


[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

### Details\

{% for group, commits in commits | group_by(attribute="group") %}
    #### {{ group | upper_first }}
    {%- for commit in commits %}
        - {{ commit.message | upper_first | trim }}\
            {% if commit.github.username %} by @{{ commit.github.username }}{%- endif -%}
            {% if commit.github.pr_number %} in \
              [#{{ commit.github.pr_number }}]({{ self::remote_url() }}/pull/{{ commit.github.pr_number }}) \
            {%- endif -%}
    {% endfor %}
{% endfor %}

{%- if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{%- endif -%}

{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor %}\n
"""
trim = true


[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]
commit_parsers = [
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
protect_breaking_commits = false
filter_commits = true
tag_pattern = "v[0-9].*"
topo_order = false
sort_commits = "oldest"
